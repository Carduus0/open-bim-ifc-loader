
import * as THREE from "three";
import * as WEBIFC from "web-ifc";
import * as BUI from "@thatopen/ui";
import * as OBC from "@thatopen/components";

const container = document.getElementById("container")!;
const fileNameDisplay = document.getElementById("file-name");
const buttonsContainer = document.getElementById("buttons-container");

const components = new OBC.Components();

const worlds = components.get(OBC.Worlds);

const world = worlds.create<
  OBC.SimpleScene,
  OBC.SimpleCamera,
  OBC.SimpleRenderer
>();

world.scene = new OBC.SimpleScene(components);
world.renderer = new OBC.SimpleRenderer(components, container);
world.camera = new OBC.SimpleCamera(components);

components.init();

world.camera.controls.setLookAt(12, 6, 8, 0, 0, -10);

world.scene.setup();

const grids = components.get(OBC.Grids);
grids.create(world);

world.scene.three.background = null;

const fragments = components.get(OBC.FragmentsManager);
const fragmentIfcLoader = components.get(OBC.IfcLoader);

// await fragmentIfcLoader.setup();

async function setupLoader() {
  await fragmentIfcLoader.setup({  wasm: {
    path: "./",
    absolute: true
  }});
}

setupLoader();

const excludedCats = [
  WEBIFC.IFCTENDONANCHOR,
  WEBIFC.IFCREINFORCINGBAR,
  WEBIFC.IFCREINFORCINGELEMENT,
];

for (const cat of excludedCats) {
  fragmentIfcLoader.settings.excludedCategories.add(cat);
}

fragmentIfcLoader.settings.webIfc.COORDINATE_TO_ORIGIN = true;

/* MD

  Keep in mind that the browser can't access the file of your computer directly, so you will need to use the Open File API to open local files.

  :::
*/

// async function loadIfc() {
//   const file = await fetch("./models/EJES-rEVIT.ifc");
//   const data = await file.arrayBuffer();
//   const buffer = new Uint8Array(data);
//   const model = await fragmentIfcLoader.load(buffer);
//   // model.name = "example";
//   world.scene.three.add(model);
// }
let uuid = "";
async function loadIfc() {
  const file = await fetch("./models/EJES-rEVIT.ifc");
  const data = await file.arrayBuffer();
  const buffer = new Uint8Array(data);
  const fragmentsGroup = await fragmentIfcLoader.load(buffer);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π –æ–±—ä–µ–º –º–æ–¥–µ–ª–∏
  const boundingBox = new THREE.Box3().setFromObject(fragmentsGroup);
  const modelMinY = boundingBox.min.y;

  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ items
  fragmentsGroup.items.forEach(fragment => {
    const mesh = fragment.mesh as THREE.Object3D;
    if (mesh instanceof THREE.InstancedMesh) {
      const matrix = new THREE.Matrix4();
      for (let i = 0; i < mesh.count; i++) {
        mesh.getMatrixAt(i, matrix);
        matrix.setPosition(matrix.elements[12], matrix.elements[13] - modelMinY, matrix.elements[14]);
        mesh.setMatrixAt(i, matrix);
      }
      mesh.instanceMatrix.needsUpdate = true;
    } else if (mesh instanceof THREE.Mesh) {
      (mesh as THREE.Mesh).position.y -= modelMinY; // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω–∏–∑
    }
  });

  world.scene.three.add(fragmentsGroup);
  uuid = fragmentsGroup.uuid; // –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
}
//-----
const input = document.getElementById('ifcInput');
if (input) {
  input.addEventListener('change', async (event) => {
    const inputElement = event.target as HTMLInputElement;
    
    if (inputElement.files && inputElement.files.length > 0) {
      const file = inputElement.files[0];
      
      // –ü–æ–ª—É—á–∞–µ–º ArrayBuffer –∏–∑ —Ñ–∞–π–ª–∞
      const data = await file.arrayBuffer();
      // –°–æ–∑–¥–∞–µ–º Uint8Array –∏–∑ ArrayBuffer
      const buffer = new Uint8Array(data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fragmentIfcLoader –∏ world.scene.three —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (fragmentIfcLoader && world.scene.three) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º IFC-–º–æ–¥–µ–ª—å –∏–∑ Uint8Array
        const fragmentsGroup = await fragmentIfcLoader.load(buffer);
        
           // –í—ã—á–∏—Å–ª—è–µ–º –≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π –æ–±—ä–µ–º –º–æ–¥–µ–ª–∏
        const boundingBox = new THREE.Box3().setFromObject(fragmentsGroup);
        const modelMinY = boundingBox.min.y;

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ items
        fragmentsGroup.items.forEach(fragment => {
          const mesh = fragment.mesh as THREE.Object3D;
          if (mesh instanceof THREE.InstancedMesh) {
            const matrix = new THREE.Matrix4();
            for (let i = 0; i < mesh.count; i++) {
              mesh.getMatrixAt(i, matrix);
              matrix.setPosition(matrix.elements[12], matrix.elements[13] - modelMinY, matrix.elements[14]);
              mesh.setMatrixAt(i, matrix);
            }
            mesh.instanceMatrix.needsUpdate = true;
          } else if (mesh instanceof THREE.Mesh) {
            (mesh as THREE.Mesh).position.y -= modelMinY; // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω–∏–∑
          }
        });

        world.scene.three.add(fragmentsGroup);
      }

      if (fileNameDisplay) {
        fileNameDisplay.textContent = `Loaded file: ${file.name}`;
      }
     
    }
  }, false);
} else {
  console.error("Element #ifcInput not found");
}

/* MD
  ### üéÅ Exporting the result to fragments
  ---
  Once you have your precious fragments, you might want to save them so that you don't need to open this IFC file each time your user gets into your app. Instead, the next time you can load the fragments directly. 
*/

function download(file: File) {
  const link = document.createElement("a");
  link.href = URL.createObjectURL(file);
  link.download = file.name;
  document.body.appendChild(link);
  link.click();
  link.remove();
}

async function exportFragments() {
  if (!fragments.groups.size) {
    return;
  }
  const group = Array.from(fragments.groups.values())[0];
  const data = fragments.export(group);
  download(new File([new Blob([data])], "small.frag"));

  const properties = group.getLocalProperties();
  if (properties) {
    download(new File([JSON.stringify(properties)], "small.json"));
  }
}

//----
// async function exportAllFragments() {
//   if (!fragments.groups.size) {
//     return;
//   }

//   fragments.groups.forEach((group, groupId) => {
//     const data = fragments.export(group);
//     download(new File([new Blob([data])], `${groupId}.frag`));

//     const properties = group.getLocalProperties();
//     if (properties) {
//       download(new File([JSON.stringify(properties)], `${groupId}.json`));
//     }
//   });
// }
//------------------
function disposeFragments() {
  fragments.dispose();
    // –°–±—Ä–æ—Å input –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    const inputElement = document.getElementById('ifcInput') as HTMLInputElement | null;
    if (inputElement) {
      inputElement.value = '';
    }
  
}

BUI.Manager.init();
// <bim-panel active label="IFC Loader " >
//</bim-panel>
const panel = BUI.Component.create<BUI.PanelSection>(() => {
  return BUI.html`
 
    <bim-panel-section collapsed label="Controls">
      <bim-panel-section style="padding-top: 2px;">
      
        <bim-button label="Load IFC"
  @click="${() => {// loadOtherFile()
    const inputElement = document.getElementById('ifcInput');
    if (inputElement) {
      inputElement.click(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    } else {
      console.error("Element #ifcInput not found");
    }
  }}">
</bim-button>
            
        <bim-button label="Export fragments"
          @click="${() => {
            exportFragments();
            // exportAllFragments()
          }}">
        </bim-button>  
            
        <bim-button label="Dispose fragments"
          @click="${() => {
            disposeFragments();
          }}">
        </bim-button>
      
      </bim-panel-section>
      
    
  `;
});

document.body.append(panel);
//-----------
// const inputFrag = document.getElementById('fragInput');
// if (inputFrag) {
//   inputFrag.addEventListener('change', async (event) => {
//     const inputElement = event.target as HTMLInputElement;
//     inputFrag.addEventListener('change', async (event) => {
//   const inputElement = event.target as HTMLInputElement;
  
//   if (inputElement.files && inputElement.files.length > 0) {
//     let fragFile, jsonFile;
//     for (const file of inputElement.files) {
//       if (file.name.endsWith('.frag')) {
//         fragFile = file;
//       } else if (file.name.endsWith('.json')) {
//         jsonFile = file;
//       }
//     }
    
//     if (fragFile && jsonFile) {
//       // –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ñ–∞–π–ª—ã .frag –∏ .json
//       await loadFragments(fragFile, jsonFile);
//     } else {
//       console.error("Both .frag and .json files are required");
//     }
//   }
// });
//   })
// }
// async function loadFrag(fragFile: { arrayBuffer: () => any; }, jsonFile: Blob) {
//   // –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ fragFile –∏ jsonFile
//   // –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ .frag
//   const fragData = await fragFile.arrayBuffer();
//   const fragBuffer = new Uint8Array(fragData);
  
//   // –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ .json
//   const jsonData = await new Promise((resolve) => {
//     const reader = new FileReader();
//     reader.onload = (e) => resolve(JSON.parse(e.target.result));
//     reader.readAsText(jsonFile);
//   });
  
//   // –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å fragBuffer –∏ jsonData, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
//   // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∑–¥–µ—Å—å...
// }



//  const loadFragmentsButton = document.getElementById('loadFragmentsButton') as HTMLButtonElement | null;
//  if (loadFragmentsButton) {
//   loadFragmentsButton.addEventListener('click', () => {
//     inputFrag.click();
//   });
// }



// let uuid = "";

// async function loadFragments(fragFile?: File, jsonFile?: File) {
//   if (fragments.groups.size) {
//     return;
//   }
//   const fragFile = await fetch(
//     "https://thatopen.github.io/engine_components/resources/small.frag",
//   );
//   const fragData = await fragFile.arrayBuffer();
//   const fragBuffer = new Uint8Array(fragData);

//   const jsonFile = await fetch(
//     "https://thatopen.github.io/engine_components/resources/small.json",
//   );
//   const jsonData = await jsonFile.json();

//   const group = await fragments.load(fragBuffer);
//   group.setLocalProperties(jsonData); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω

//   world.scene.three.add(group);
//   uuid = group.uuid;
// }
// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .frag —Ñ–∞–π–ª–æ–≤
const inputFrag = document.getElementById('fragInput');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ —Å–∫—Ä—ã—Ç–æ–º—É input
const loadFragmentsButton = document.getElementById('loadFragmentsButton');
if (loadFragmentsButton && inputFrag) {
  loadFragmentsButton.addEventListener('click', () => {
    inputFrag.click(); // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ —Å–∫—Ä—ã—Ç–æ–º—É input
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è input, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π .frag —Ñ–∞–π–ª
if (inputFrag) {
  inputFrag.addEventListener('change', async (event) => {
    const inputElement = event.target as HTMLInputElement;
    
    if (inputElement.files && inputElement.files.length > 0) {
      const fragFile = inputElement.files[0];
      if (fragFile.name.endsWith('.frag')) {
        await loadFrag(fragFile);
      } else {
        console.error("A .frag file is required");
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .frag —Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –≤ —Å—Ü–µ–Ω—É
async function loadFrag(fragFile: File) {
  const fragData = await fragFile.arrayBuffer();
  const fragBuffer = new Uint8Array(fragData);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fragmentIfcLoader –∏ world.scene.three —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  if (fragmentIfcLoader && world.scene.three) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º .frag-–º–æ–¥–µ–ª—å –∏–∑ Uint8Array
    const fragmentsGroup = await fragmentIfcLoader.load(fragBuffer);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ —Å—Ü–µ–Ω—É
    world.scene.three.add(fragmentsGroup);
  }
}

 // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ loadIfc –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 document.addEventListener('DOMContentLoaded', loadIfc);
